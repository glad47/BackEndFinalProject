2020-07-13 09:14:27 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1155 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 09:14:27 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 09:14:54 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 47.394 seconds (JVM running for 53.722) 
2020-07-13 09:24:02 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 09:24:18 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxMjM0NUBxcS5jb20iLCJleHAiOjE1OTQ4OTE4OTZ9.VLilfAFkgMAzWI2Pm4YTjy0Qgh2QPvdlxp9UgdKg2sEgsYvCbdsAu_dEmDDbaZh6HocXQRtPXJdnqSyGfO0TIA】 
2020-07-13 09:24:18 [http-nio-8877-exec-3] INFO  c.j.w.p.utils.JwtTokenUtil : 
 解析JWT==>[{sub=12345@qq.com, exp=1594891896}] 
2020-07-13 09:24:18 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 解析出username===>【12345@qq.com】 
2020-07-13 09:24:19 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 09:24:19 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: 12345@qq.com(String) 
2020-07-13 09:24:19 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 1 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 查询出userDetails===>【com.jugu.www.pcbonlinev2.domain.dto.UserDetailsDTO@18b64377】 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.utils.JwtTokenUtil : 
 解析JWT==>[{sub=12345@qq.com, exp=1594891896}] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.utils.JwtTokenUtil : 
 解析JWT==>[{sub=12345@qq.com, exp=1594891896}] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxMjM0NUBxcS5jb20iLCJleHAiOjE1OTQ4OTE4OTZ9.VLilfAFkgMAzWI2Pm4YTjy0Qgh2QPvdlxp9UgdKg2sEgsYvCbdsAu_dEmDDbaZh6HocXQRtPXJdnqSyGfO0TIA】 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.utils.JwtTokenUtil : 
 解析JWT==>[{sub=12345@qq.com, exp=1594891896}] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 解析出username===>【12345@qq.com】 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/users] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [GET] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.UserController.query] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[1, 10, UserQueryDTO(username=null)]] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.controller.UserController : 
 query:[UserQueryDTO(username=null)] 
2020-07-13 09:24:19 [http-nio-8877-exec-3] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 ==>  Preparing: SELECT COUNT(1) FROM user  
2020-07-13 09:24:19 [http-nio-8877-exec-3] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 ==> Parameters:  
2020-07-13 09:24:19 [http-nio-8877-exec-3] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user LIMIT ?,?  
2020-07-13 09:24:19 [http-nio-8877-exec-3] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 ==> Parameters: 0(Long), 10(Long) 
2020-07-13 09:24:19 [http-nio-8877-exec-3] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 <==      Total: 10 
2020-07-13 09:24:19 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 返回结果 <<<<<<< [ResponseResult(success=true, code=null, message=null, result=PageResult(pageNo=1, pageSize=10, total=330, pageNum=33, data=[UserVO(id=27, userName=11, email=1170737711@qq.com, password=aca2d6bd777ac00e4581911a87dcc8a11b5faf11e08f584513e380a01693ef38), UserVO(id=28, userName=zhangsan, email=12345@qq.com, password=aca2d6bd777ac00e4581911a87dcc8a11b5faf11e08f584513e380a01693ef38), UserVO(id=29, userName=null, email=parker@qq.com, password=47625ed74cab8fbc0a8348f3df1feb07f87601e34d62bd12eb0d51616566fab5), UserVO(id=30, userName=null, email=52278@qq.com, password=aca2d6bd777ac00e4581911a87dcc8a11b5faf11e08f584513e380a01693ef38), UserVO(id=31, userName=null, email=jorgen.toyra@gmail.com, password=b4438e7d7cb80b1aff0b50a3fd67c41e7250ee97cd026268d1852b827b8ee28a), UserVO(id=32, userName=null, email=Ada@globalsuccess.cc, password=aca2d6bd777ac00e4581911a87dcc8a11b5faf11e08f584513e380a01693ef38), UserVO(id=33, userName=null, email=wesley6@gmail.com, password=e60542ee7da4177a7b0513260c0fa0094d6261d60a98f961dc5c626c9f6e6849), UserVO(id=34, userName=ho, email=0ee5bf4be0@mailox.fun, password=123), UserVO(id=35, userName=null, email=arlighting2016@gmail.com, password=3f796e95940c3e30223aad58b9658ffffeb832848cee95f54f1e339fba23883f), UserVO(id=36, userName=null, email=aesodinfo@gmail.com, password=6d80bce21c8a7a9493c00a2c423668c8ddc9ba8ef9c843cb5af4287f7fd9a812)]))] 
2020-07-13 09:28:27 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1219 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 09:28:27 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 09:28:52 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.712 seconds (JVM running for 52.774) 
2020-07-13 09:44:33 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxMjM0NUBxcS5jb20iLCJleHAiOjE1OTQ4OTE4OTZ9.VLilfAFkgMAzWI2Pm4YTjy0Qgh2QPvdlxp9UgdKg2sEgsYvCbdsAu_dEmDDbaZh6HocXQRtPXJdnqSyGfO0TIA】 
2020-07-13 09:44:34 [http-nio-8877-exec-2] INFO  c.j.w.p.utils.JwtTokenUtil : 
 解析JWT==>[{sub=12345@qq.com, exp=1594891896}] 
2020-07-13 09:44:34 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 解析出username===>【12345@qq.com】 
2020-07-13 09:44:35 [http-nio-8877-exec-2] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 09:44:35 [http-nio-8877-exec-2] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: 12345@qq.com(String) 
2020-07-13 09:44:35 [http-nio-8877-exec-2] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 1 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 查询出userDetails===>【com.jugu.www.pcbonlinev2.domain.dto.UserDetailsDTO@2bbdbf07】 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.utils.JwtTokenUtil : 
 解析JWT==>[{sub=12345@qq.com, exp=1594891896}] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.utils.JwtTokenUtil : 
 解析JWT==>[{sub=12345@qq.com, exp=1594891896}] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxMjM0NUBxcS5jb20iLCJleHAiOjE1OTQ4OTE4OTZ9.VLilfAFkgMAzWI2Pm4YTjy0Qgh2QPvdlxp9UgdKg2sEgsYvCbdsAu_dEmDDbaZh6HocXQRtPXJdnqSyGfO0TIA】 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.utils.JwtTokenUtil : 
 解析JWT==>[{sub=12345@qq.com, exp=1594891896}] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 解析出username===>【12345@qq.com】 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/users] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [GET] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.UserController.query] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[1, 10, UserQueryDTO(username=null)]] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] INFO  c.j.w.p.controller.UserController : 
 query:[UserQueryDTO(username=null)] 
2020-07-13 09:44:35 [http-nio-8877-exec-2] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 ==>  Preparing: SELECT COUNT(1) FROM user  
2020-07-13 09:44:35 [http-nio-8877-exec-2] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 ==> Parameters:  
2020-07-13 09:44:35 [http-nio-8877-exec-2] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user LIMIT ?,?  
2020-07-13 09:44:35 [http-nio-8877-exec-2] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 ==> Parameters: 0(Long), 10(Long) 
2020-07-13 09:44:35 [http-nio-8877-exec-2] DEBUG c.j.w.p.m.UserMapper.selectPage : 
 <==      Total: 10 
2020-07-13 09:44:36 [http-nio-8877-exec-2] INFO  c.j.w.p.config.LogAspectConfig : 
 返回结果 <<<<<<< [ResponseResult(success=true, code=null, message=null, result=PageResult(pageNo=1, pageSize=10, total=330, pageNum=33, data=[UserVO(id=27, userName=11, email=1170737711@qq.com, password=aca2d6bd777ac00e4581911a87dcc8a11b5faf11e08f584513e380a01693ef38), UserVO(id=28, userName=zhangsan, email=12345@qq.com, password=aca2d6bd777ac00e4581911a87dcc8a11b5faf11e08f584513e380a01693ef38), UserVO(id=29, userName=null, email=parker@qq.com, password=47625ed74cab8fbc0a8348f3df1feb07f87601e34d62bd12eb0d51616566fab5), UserVO(id=30, userName=null, email=52278@qq.com, password=aca2d6bd777ac00e4581911a87dcc8a11b5faf11e08f584513e380a01693ef38), UserVO(id=31, userName=null, email=jorgen.toyra@gmail.com, password=b4438e7d7cb80b1aff0b50a3fd67c41e7250ee97cd026268d1852b827b8ee28a), UserVO(id=32, userName=null, email=Ada@globalsuccess.cc, password=aca2d6bd777ac00e4581911a87dcc8a11b5faf11e08f584513e380a01693ef38), UserVO(id=33, userName=null, email=wesley6@gmail.com, password=e60542ee7da4177a7b0513260c0fa0094d6261d60a98f961dc5c626c9f6e6849), UserVO(id=34, userName=ho, email=0ee5bf4be0@mailox.fun, password=123), UserVO(id=35, userName=null, email=arlighting2016@gmail.com, password=3f796e95940c3e30223aad58b9658ffffeb832848cee95f54f1e339fba23883f), UserVO(id=36, userName=null, email=aesodinfo@gmail.com, password=6d80bce21c8a7a9493c00a2c423668c8ddc9ba8ef9c843cb5af4287f7fd9a812)]))] 
2020-07-13 10:26:09 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:26:10 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:47:20 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1369 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 10:47:20 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 10:47:44 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.855 seconds (JVM running for 51.103) 
2020-07-13 10:48:24 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:24 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:24 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:24 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:24 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:24 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:24 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:25 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:25 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:31 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:31 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:34 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:34 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:34 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:34 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:34 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:34 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:34 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:35 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:48:35 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:53:42 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1383 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 10:53:42 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 10:54:06 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.732 seconds (JVM running for 50.78) 
2020-07-13 10:54:23 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:23 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:23 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:23 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:23 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:23 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:23 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:24 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:24 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:28 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:28 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:28 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:28 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:28 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:28 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:28 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:29 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:54:29 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:55:37 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1391 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 10:55:37 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 10:56:39 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1401 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 10:56:39 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 10:57:02 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.155 seconds (JVM running for 50.053) 
2020-07-13 10:57:21 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:57:21 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:57:21 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:57:21 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:57:21 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:57:21 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:57:21 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:57:22 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:57:22 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:31 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1407 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 10:58:31 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 10:58:55 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.32 seconds (JVM running for 50.357) 
2020-07-13 10:58:57 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:57 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:57 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:57 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:57 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:57 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:57 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:58 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:58:58 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:00 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:00 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:00 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:00 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:00 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:00 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:00 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:01 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:01 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:10 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 10:59:11 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:00 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1433 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:08:00 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:08:27 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 47.818 seconds (JVM running for 54.272) 
2020-07-13 11:08:41 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:41 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:41 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:41 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:41 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:41 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:41 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:42 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:08:42 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:09:59 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1444 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:09:59 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:10:23 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.463 seconds (JVM running for 50.527) 
2020-07-13 11:10:51 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:51 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:52 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:52 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:52 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:53 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:53 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:53 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:53 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:53 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:57 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:57 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:10:57 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:15:24 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1473 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:15:24 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:15:48 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.405 seconds (JVM running for 50.417) 
2020-07-13 11:15:55 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:15:55 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:21:47 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1489 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:21:47 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:22:13 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 47.021 seconds (JVM running for 53.203) 
2020-07-13 11:22:26 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:26 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:27 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:27 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:28 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:28 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:28 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:28 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:29 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:29 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:29 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:29 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:29 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:36 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:36 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:36 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:37 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:37 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:22:37 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:24:21 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1498 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:24:21 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:24:45 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.41 seconds (JVM running for 50.545) 
2020-07-13 11:25:02 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:02 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:02 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:02 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:02 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:02 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:03 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:03 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:03 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:04 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:04 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:04 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:04 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:08 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:08 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:08 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:08 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:08 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:08 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:09 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:09 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:09 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:09 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:09 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:14 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:14 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:14 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:17 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:17 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:17 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:19 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:19 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:19 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:19 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:19 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:19 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:25:58 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1506 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:25:58 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:26:23 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.888 seconds (JVM running for 51.73) 
2020-07-13 11:26:51 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:26:51 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:26:55 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:27:03 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:27:03 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:27:04 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:32:34 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1543 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:32:34 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:32:58 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.906 seconds (JVM running for 51.311) 
2020-07-13 11:33:17 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:19 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:21 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:22 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:22 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:22 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:22 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:22 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:22 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:23 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:24 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:24 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:24 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:24 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:24 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:24 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:30 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:30 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:31 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:31 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:31 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:31 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:31 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:31 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:32 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:33:33 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:35:35 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1543 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:35:35 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:35:46 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 31.651 seconds (JVM running for 219.758) 
2020-07-13 11:36:05 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:05 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:06 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:06 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:06 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:06 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:06 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:06 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:07 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:07 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:07 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:07 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:07 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:07 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:07 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:07 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:08 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:25 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:25 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:26 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:26 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:26 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:26 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:26 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:26 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:27 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:29 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:29 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:29 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:38 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:38 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:36:38 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:23 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1581 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:55:23 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:55:48 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 46.194 seconds (JVM running for 52.24) 
2020-07-13 11:55:56 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:56 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:57 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:57 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:57 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:57 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:57 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:57 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:58 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:58 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:58 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:58 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:58 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:58 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:58 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:58 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:55:59 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 11:58:51 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1599 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 11:58:51 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 11:59:17 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 46.109 seconds (JVM running for 52.318) 
2020-07-13 12:00:17 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:17 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:18 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:18 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:18 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:18 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:18 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:18 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:19 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:20 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:20 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:20 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:20 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:20 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:20 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:29 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:29 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:32 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 12:00:32 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:10:23 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1765 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 14:10:23 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 14:10:48 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.796 seconds (JVM running for 52.233) 
2020-07-13 14:13:13 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1771 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 14:13:13 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 14:13:38 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.681 seconds (JVM running for 51.661) 
2020-07-13 14:13:53 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:53 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:54 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:54 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:54 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:54 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:54 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:55 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:55 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:55 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:56 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:59 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:13:59 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:14:00 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:14:00 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:38:25 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1853 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 14:38:25 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 14:38:50 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.038 seconds (JVM running for 50.89) 
2020-07-13 14:39:05 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:05 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:06 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:06 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:07 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:07 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:07 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:07 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:08 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:14 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:14 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:17 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:39:17 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:43:54 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1867 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 14:43:54 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 14:44:18 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.313 seconds (JVM running for 51.265) 
2020-07-13 14:44:25 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:25 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:26 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:26 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:26 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:26 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:26 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:26 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:27 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:28 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:30 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:30 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:32 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:44:32 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:14 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:14 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:14 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:14 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:14 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:14 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:14 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:14 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:15 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:16 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:18 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:18 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:19 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:47:19 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:49:31 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1887 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 14:49:31 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 14:49:56 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.608 seconds (JVM running for 51.565) 
2020-07-13 14:49:58 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:49:58 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:49:59 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:49:59 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:49:59 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:49:59 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:49:59 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:49:59 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:00 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:01 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:01 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:01 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:01 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:01 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:01 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:02 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:02 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:03 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:03 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:16 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:50:16 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:53:49 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1903 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 14:53:49 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 14:54:14 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 46.02 seconds (JVM running for 51.941) 
2020-07-13 14:54:23 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:23 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:24 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:26 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:26 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:27 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:27 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:35 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:54:35 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:35 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:35 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:36 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:39 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:39 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:40 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:56:40 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:58:09 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1923 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 14:58:09 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 14:58:33 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.302 seconds (JVM running for 50.131) 
2020-07-13 14:59:43 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:43 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:44 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:47 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:47 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:50 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 14:59:50 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:05 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1938 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 15:03:05 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 15:03:29 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.927 seconds (JVM running for 50.762) 
2020-07-13 15:03:36 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:36 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:37 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:38 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:38 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:38 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:38 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:38 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:38 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:39 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:39 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:40 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:03:40 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:22 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1958 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 15:07:22 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 15:07:47 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.147 seconds (JVM running for 50.985) 
2020-07-13 15:07:58 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:58 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:07:59 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:08:01 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:08:01 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:08:02 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:08:02 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:09:18 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:09:18 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:09:18 [http-nio-8877-exec-9] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/auth/login] 
2020-07-13 15:09:18 [http-nio-8877-exec-9] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [POST] 
2020-07-13 15:09:18 [http-nio-8877-exec-9] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 15:09:18 [http-nio-8877-exec-9] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.AuthController.login] 
2020-07-13 15:09:18 [http-nio-8877-exec-9] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[null, null]] 
2020-07-13 15:09:18 [http-nio-8877-exec-9] INFO  c.j.w.p.config.ApiSecurityConfig : 
 userNotFoundPassword 
2020-07-13 15:09:19 [http-nio-8877-exec-9] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 15:09:19 [http-nio-8877-exec-9] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: NONE_PROVIDED(String) 
2020-07-13 15:09:19 [http-nio-8877-exec-9] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 0 
2020-07-13 15:09:19 [http-nio-8877-exec-9] ERROR c.j.w.p.e.GlobalExceptionHandler : 
 捕捉到运行时异常： 
org.springframework.security.authentication.InternalAuthenticationServiceException: null
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator.authenticate(WebSecurityConfigurerAdapter.java:511)
	at com.jugu.www.pcbonlinev2.service.impl.AuthServiceImpl.login(AuthServiceImpl.java:31)
	at com.jugu.www.pcbonlinev2.controller.AuthController.login(AuthController.java:59)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$FastClassBySpringCGLIB$$ba3a94c7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$EnhancerBySpringCGLIB$$48c79184.login(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.TraceIdFilter.doFilter(TraceIdFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at com.jugu.www.pcbonlinev2.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:27)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	... 108 common frames omitted
2020-07-13 15:09:19 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:09:19 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:10:30 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:10:30 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:10:30 [http-nio-8877-exec-1] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/auth/login] 
2020-07-13 15:10:30 [http-nio-8877-exec-1] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [POST] 
2020-07-13 15:10:30 [http-nio-8877-exec-1] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 15:10:30 [http-nio-8877-exec-1] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.AuthController.login] 
2020-07-13 15:10:30 [http-nio-8877-exec-1] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[null, null]] 
2020-07-13 15:10:30 [http-nio-8877-exec-1] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 15:10:30 [http-nio-8877-exec-1] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: NONE_PROVIDED(String) 
2020-07-13 15:10:30 [http-nio-8877-exec-1] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 0 
2020-07-13 15:10:30 [http-nio-8877-exec-1] ERROR c.j.w.p.e.GlobalExceptionHandler : 
 捕捉到运行时异常： 
org.springframework.security.authentication.InternalAuthenticationServiceException: null
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator.authenticate(WebSecurityConfigurerAdapter.java:501)
	at com.jugu.www.pcbonlinev2.service.impl.AuthServiceImpl.login(AuthServiceImpl.java:31)
	at com.jugu.www.pcbonlinev2.controller.AuthController.login(AuthController.java:59)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$FastClassBySpringCGLIB$$ba3a94c7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$EnhancerBySpringCGLIB$$48c79184.login(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.TraceIdFilter.doFilter(TraceIdFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at com.jugu.www.pcbonlinev2.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:27)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	... 108 common frames omitted
2020-07-13 15:13:33 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1969 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 15:13:33 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 15:13:57 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.995 seconds (JVM running for 50.834) 
2020-07-13 15:14:02 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:02 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:03 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:07 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:07 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:09 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:09 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:20 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:20 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/auth/login] 
2020-07-13 15:14:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [POST] 
2020-07-13 15:14:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 15:14:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.AuthController.login] 
2020-07-13 15:14:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[null, null]] 
2020-07-13 15:14:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.ApiSecurityConfig : 
 userNotFoundPassword 
2020-07-13 15:14:20 [http-nio-8877-exec-5] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 15:14:20 [http-nio-8877-exec-5] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: NONE_PROVIDED(String) 
2020-07-13 15:14:20 [http-nio-8877-exec-5] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 0 
2020-07-13 15:14:20 [http-nio-8877-exec-5] ERROR c.j.w.p.e.GlobalExceptionHandler : 
 捕捉到运行时异常： 
org.springframework.security.authentication.InternalAuthenticationServiceException: null
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator.authenticate(WebSecurityConfigurerAdapter.java:511)
	at com.jugu.www.pcbonlinev2.service.impl.AuthServiceImpl.login(AuthServiceImpl.java:31)
	at com.jugu.www.pcbonlinev2.controller.AuthController.login(AuthController.java:59)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$FastClassBySpringCGLIB$$ba3a94c7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$EnhancerBySpringCGLIB$$b67c9aed.login(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.TraceIdFilter.doFilter(TraceIdFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at com.jugu.www.pcbonlinev2.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:27)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	... 108 common frames omitted
2020-07-13 15:14:21 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:14:21 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:16:05 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:16:05 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:16:05 [http-nio-8877-exec-10] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/auth/login] 
2020-07-13 15:16:05 [http-nio-8877-exec-10] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [POST] 
2020-07-13 15:16:05 [http-nio-8877-exec-10] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 15:16:05 [http-nio-8877-exec-10] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.AuthController.login] 
2020-07-13 15:16:05 [http-nio-8877-exec-10] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[12345@qq.com, 1234569]] 
2020-07-13 15:16:05 [http-nio-8877-exec-10] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 15:16:05 [http-nio-8877-exec-10] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: 12345@qq.com(String) 
2020-07-13 15:16:05 [http-nio-8877-exec-10] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 1 
2020-07-13 15:16:05 [http-nio-8877-exec-10] INFO  c.j.w.p.config.ApiSecurityConfig : 
 charSequence: 
2020-07-13 15:16:05 [http-nio-8877-exec-10] ERROR c.j.w.p.e.GlobalExceptionHandler : 
 捕捉的异常: 【{}】 
org.springframework.security.authentication.BadCredentialsException: Bad credentials
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(DaoAuthenticationProvider.java:93)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:166)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator.authenticate(WebSecurityConfigurerAdapter.java:501)
	at com.jugu.www.pcbonlinev2.service.impl.AuthServiceImpl.login(AuthServiceImpl.java:31)
	at com.jugu.www.pcbonlinev2.controller.AuthController.login(AuthController.java:59)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$FastClassBySpringCGLIB$$ba3a94c7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$EnhancerBySpringCGLIB$$b67c9aed.login(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.TraceIdFilter.doFilter(TraceIdFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-07-13 15:16:12 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:16:12 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:16:12 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/auth/login] 
2020-07-13 15:16:12 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [POST] 
2020-07-13 15:16:12 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 15:16:12 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.AuthController.login] 
2020-07-13 15:16:12 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[12345@qq.com, 123456]] 
2020-07-13 15:16:12 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 15:16:12 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: 12345@qq.com(String) 
2020-07-13 15:16:12 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 1 
2020-07-13 15:16:12 [http-nio-8877-exec-3] INFO  c.j.w.p.config.ApiSecurityConfig : 
 charSequence: 
2020-07-13 15:16:12 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 15:16:12 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: 12345@qq.com(String) 
2020-07-13 15:16:12 [http-nio-8877-exec-3] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 1 
2020-07-13 15:16:13 [http-nio-8877-exec-3] INFO  c.j.w.p.config.LogAspectConfig : 
 返回结果 <<<<<<< [ResponseResult(success=true, code=null, message=null, result=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxMjM0NUBxcS5jb20iLCJleHAiOjE1OTUwNTY1NzJ9.Tq8LrYfFh-D1z9GYRpOZdmy8IfLWdI55uv0j1qPpjQmJL_yecaeciQSCfdBQCx4Nn3b3xntp83HqSNtBBEkdow)] 
2020-07-13 15:19:36 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 1988 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 15:19:36 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 15:20:00 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.635 seconds (JVM running for 50.652) 
2020-07-13 15:20:05 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:05 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:06 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:08 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:08 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:09 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:09 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:20 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:20 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/auth/login] 
2020-07-13 15:20:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [POST] 
2020-07-13 15:20:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 15:20:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.AuthController.login] 
2020-07-13 15:20:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[null, null]] 
2020-07-13 15:20:20 [http-nio-8877-exec-5] INFO  c.j.w.p.config.ApiSecurityConfig : 
 userNotFoundPassword 
2020-07-13 15:20:20 [http-nio-8877-exec-5] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 15:20:20 [http-nio-8877-exec-5] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: NONE_PROVIDED(String) 
2020-07-13 15:20:20 [http-nio-8877-exec-5] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 0 
2020-07-13 15:20:20 [http-nio-8877-exec-5] ERROR c.j.w.p.e.GlobalExceptionHandler : 
 捕捉到运行时异常： 
org.springframework.security.authentication.InternalAuthenticationServiceException: null
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator.authenticate(WebSecurityConfigurerAdapter.java:511)
	at com.jugu.www.pcbonlinev2.service.impl.AuthServiceImpl.login(AuthServiceImpl.java:31)
	at com.jugu.www.pcbonlinev2.controller.AuthController.login(AuthController.java:59)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$FastClassBySpringCGLIB$$ba3a94c7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$EnhancerBySpringCGLIB$$8e08dbb7.login(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.TraceIdFilter.doFilter(TraceIdFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at com.jugu.www.pcbonlinev2.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:27)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	... 108 common frames omitted
2020-07-13 15:20:20 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:20:20 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:12 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:12 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:12 [http-nio-8877-exec-6] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/auth/login] 
2020-07-13 15:21:12 [http-nio-8877-exec-6] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [POST] 
2020-07-13 15:21:12 [http-nio-8877-exec-6] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 15:21:12 [http-nio-8877-exec-6] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.AuthController.login] 
2020-07-13 15:21:12 [http-nio-8877-exec-6] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[null, null]] 
2020-07-13 15:21:12 [http-nio-8877-exec-6] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 15:21:12 [http-nio-8877-exec-6] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: NONE_PROVIDED(String) 
2020-07-13 15:21:12 [http-nio-8877-exec-6] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 0 
2020-07-13 15:21:12 [http-nio-8877-exec-6] ERROR c.j.w.p.e.GlobalExceptionHandler : 
 捕捉到运行时异常： 
org.springframework.security.authentication.InternalAuthenticationServiceException: null
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator.authenticate(WebSecurityConfigurerAdapter.java:501)
	at com.jugu.www.pcbonlinev2.service.impl.AuthServiceImpl.login(AuthServiceImpl.java:31)
	at com.jugu.www.pcbonlinev2.controller.AuthController.login(AuthController.java:59)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$FastClassBySpringCGLIB$$ba3a94c7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.jugu.www.pcbonlinev2.controller.AuthController$$EnhancerBySpringCGLIB$$8e08dbb7.login(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.jugu.www.pcbonlinev2.filter.TraceIdFilter.doFilter(TraceIdFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at com.jugu.www.pcbonlinev2.filter.JwtTokenFilter.doFilterInternal(JwtTokenFilter.java:54)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at com.jugu.www.pcbonlinev2.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:27)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	... 108 common frames omitted
2020-07-13 15:21:22 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:22 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:22 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:22 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:22 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:22 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:33 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:21:34 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:03 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 2005 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 15:23:03 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 15:23:28 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 44.881 seconds (JVM running for 50.771) 
2020-07-13 15:23:32 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:32 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:32 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:32 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:32 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:32 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:32 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:32 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:33 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 15:23:34 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 16:41:43 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 16:41:43 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 16:41:44 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 16:41:44 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 16:49:35 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Starting PcbOnlineV2Application on mcdeiMac.local with PID 2822 (/Users/mc/WorkProject/pcb-online-v2/target/classes started by zl in /Users/mc/WorkProject/pcb-online-v2) 
2020-07-13 16:49:35 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 No active profile set, falling back to default profiles: default 
2020-07-13 16:49:59 [restartedMain] INFO  c.j.w.p.PcbOnlineV2Application : 
 Started PcbOnlineV2Application in 45.278 seconds (JVM running for 51.511) 
2020-07-13 17:11:51 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:51 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:52 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:52 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:52 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:52 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:52 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:52 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-8] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:54 [http-nio-8877-exec-10] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:55 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:55 [http-nio-8877-exec-1] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:55 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:55 [http-nio-8877-exec-2] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:55 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:55 [http-nio-8877-exec-4] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:55 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:55 [http-nio-8877-exec-3] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:57 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:11:57 [http-nio-8877-exec-6] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:12:00 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:12:00 [http-nio-8877-exec-5] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:12:05 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:12:05 [http-nio-8877-exec-7] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:12:05 [http-nio-8877-exec-7] INFO  c.j.w.p.config.LogAspectConfig : 
 请求URL >>>>> [http://localhost:8877/api/auth/login] 
2020-07-13 17:12:05 [http-nio-8877-exec-7] INFO  c.j.w.p.config.LogAspectConfig : 
 请求类型 >>>> [POST] 
2020-07-13 17:12:05 [http-nio-8877-exec-7] INFO  c.j.w.p.config.LogAspectConfig : 
 IP >>>>> [0:0:0:0:0:0:0:1] 
2020-07-13 17:12:05 [http-nio-8877-exec-7] INFO  c.j.w.p.config.LogAspectConfig : 
 处理类 >>>>> [com.jugu.www.pcbonlinev2.controller.AuthController.login] 
2020-07-13 17:12:05 [http-nio-8877-exec-7] INFO  c.j.w.p.config.LogAspectConfig : 
 方法参数 >>> [[12345@qq.com, 123456]] 
2020-07-13 17:12:05 [http-nio-8877-exec-7] INFO  c.j.w.p.config.ApiSecurityConfig : 
 userNotFoundPassword 
2020-07-13 17:12:06 [http-nio-8877-exec-7] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 17:12:06 [http-nio-8877-exec-7] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: 12345@qq.com(String) 
2020-07-13 17:12:06 [http-nio-8877-exec-7] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 1 
2020-07-13 17:12:06 [http-nio-8877-exec-7] INFO  c.j.w.p.config.ApiSecurityConfig : 
 charSequence: 
2020-07-13 17:12:06 [http-nio-8877-exec-7] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==>  Preparing: SELECT id,user_name,email,password,skype_id,google_id,facebook_id,mobile_phone,address,country,city,business_type,jobrole,applications,invalid_mark,favicon,gmt_create,gmt_modified,uuid,business_id,business_name,user_system_id,facebook_login_id,google_login_id,invitation_user_id,user_ip,audit_mark FROM user WHERE email=?  
2020-07-13 17:12:06 [http-nio-8877-exec-7] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 ==> Parameters: 12345@qq.com(String) 
2020-07-13 17:12:06 [http-nio-8877-exec-7] DEBUG c.j.w.p.mapper.UserMapper.selectOne : 
 <==      Total: 1 
2020-07-13 17:12:06 [http-nio-8877-exec-7] INFO  c.j.w.p.config.LogAspectConfig : 
 返回结果 <<<<<<< [ResponseResult(success=true, code=null, message=null, result=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxMjM0NUBxcS5jb20iLCJleHAiOjE1OTUwNjM1MjZ9.mrZa0_wsgJ4ZOsAdKh4KO-b5q7-_lgMyUwUA6sVD64v_GhGVwDFEx-HKmepCN2Fk4Ks9vu42E0Xbt_zJI5JZhg)] 
2020-07-13 17:12:06 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
2020-07-13 17:12:06 [http-nio-8877-exec-9] INFO  c.j.w.p.filter.JwtTokenFilter : 
 获取header的token===>【null】 
